{"version":3,"file":"react-netlify-identity.es.production.js","sources":["../src/runRoutes.tsx","../src/index.tsx"],"sourcesContent":["import GoTrue, { User } from 'gotrue-js';\n\n/**\n * This code runs on every rerender so keep it light\n * keep checking the current route and do logic based on the route\n * as dictated by netlify identity's communication with us via hashes\n */\n\nconst routes = /(confirmation|invite|recovery|email_change)_token=([^&]+)/;\nconst errorRoute = /error=access_denied&error_description=403/;\nconst accessTokenRoute = /access_token=/;\nconst confirmationRoute = /confirmation_token=/;\n\nexport function runRoutes(\n  gotrue: GoTrue,\n  setUser: (value: User) => User | undefined,\n  remember = true\n) {\n  const hash = (document.location.hash || '').replace(/^#\\/?/, '');\n  if (!hash) return; // early terminate if no hash\n\n  const m = hash.match(routes);\n  if (m) {\n    // store.verifyToken(m[1], m[2]);\n    document.location.hash = '';\n  }\n\n  const em = hash.match(errorRoute);\n  if (em) {\n    // store.openModal(\"signup\");\n    document.location.hash = '';\n  }\n  const params = {} as { [key: string]: string };\n  hash.split('&').forEach(pair => {\n    const [key, value] = pair.split('=');\n    params[key] = value;\n  });\n\n  const am = hash.match(accessTokenRoute);\n  if (am) {\n    if (!!document && params['access_token']) {\n      document.cookie = `nf_jwt=${params['access_token']}`;\n    }\n    document.location.hash = '';\n    // store.openModal(\"login\");\n    // store.completeExternalLogin(params);\n    gotrue\n      .createUser(params, remember)\n      .then(setUser)\n      .catch(console.error);\n  }\n\n  const cm = hash.match(confirmationRoute);\n  if (cm) {\n    document.location.hash = '';\n    // store.openModal(\"login\");\n    // store.completeExternalLogin(params);\n    gotrue\n      .confirm(params['confirmation_token'])\n      .then(setUser)\n      .catch(console.error);\n  }\n}\n","import React from 'react';\n\nimport GoTrue, { User, Settings } from 'gotrue-js';\nimport { runRoutes } from './runRoutes';\n\ntype authChangeParam = (user?: User) => string | void;\n\nexport type Settings = Settings;\nexport type User = User;\n\nconst defaultSettings = {\n  autoconfirm: false,\n  disable_signup: false,\n  external: {\n    bitbucket: false,\n    email: true,\n    facebook: false,\n    github: false,\n    gitlab: false,\n    google: false,\n  },\n};\n\nexport type ReactNetlifyIdentityAPI = {\n  user: User | undefined;\n  /** not meant for normal use! you should mostly use one of the other exported methods to update the user instance */\n  setUser: React.Dispatch<React.SetStateAction<User | undefined>>;\n  isConfirmedUser: boolean;\n  isLoggedIn: boolean;\n  signupUser: (\n    email: string,\n    password: string,\n    data: Object\n  ) => Promise<User | undefined>;\n  loginUser: (\n    email: string,\n    password: string,\n    remember?: boolean\n  ) => Promise<User | undefined>;\n  logoutUser: () => Promise<User | undefined>;\n  requestPasswordRecovery: (email: string) => Promise<void>;\n  recoverAccount: (\n    token: string,\n    remember?: boolean | undefined\n  ) => Promise<User>;\n  updateUser: (fields: { data: object }) => Promise<User | undefined>;\n  getFreshJWT: () => Promise<string>;\n  authedFetch: {\n    get: (endpoint: string, obj?: {}) => Promise<any>;\n    post: (endpoint: string, obj?: {}) => Promise<any>;\n    put: (endpoint: string, obj?: {}) => Promise<any>;\n    delete: (endpoint: string, obj?: {}) => Promise<any>;\n  };\n  _goTrueInstance: GoTrue;\n  _url: string;\n  loginProvider: (\n    provider: 'bitbucket' | 'github' | 'gitlab' | 'google'\n  ) => void;\n  acceptInviteExternalUrl: (\n    provider: 'bitbucket' | 'github' | 'gitlab' | 'google',\n    token: string\n  ) => string;\n  settings: Settings;\n};\n\nconst [_useIdentityContext, _IdentityCtxProvider] = createCtx<\n  ReactNetlifyIdentityAPI\n>();\nexport const useIdentityContext = _useIdentityContext; // we dont want to expose _IdentityCtxProvider\n\n/** most people should use this provider directly */\nexport function IdentityContextProvider({\n  url,\n  children,\n  onAuthChange = () => {},\n}: {\n  url: string;\n  children: React.ReactNode;\n  onAuthChange?: authChangeParam;\n}) {\n  /******** SETUP */\n  if (!url || !validateUrl(url)) {\n    // just a safety check in case a JS user tries to skip this\n    throw new Error(\n      'invalid netlify instance URL: ' +\n        url +\n        '. Please check the docs for proper usage or file an issue.'\n    );\n  }\n  const identity = useNetlifyIdentity(url, onAuthChange);\n  return (\n    <_IdentityCtxProvider value={identity}>{children}</_IdentityCtxProvider>\n  );\n}\n\n/** some people may want to use this as a hook and bring their own contexts */\nexport function useNetlifyIdentity(\n  url: string,\n  onAuthChange: authChangeParam = () => {},\n  enableRunRoutes: boolean = true\n): ReactNetlifyIdentityAPI {\n  const goTrueInstance = React.useMemo(\n    () =>\n      new GoTrue({\n        APIUrl: `${url}/.netlify/identity`,\n        setCookie: true,\n      }),\n    [url]\n  );\n\n  const [user, setUser] = React.useState<User | undefined>(\n    goTrueInstance.currentUser() || undefined\n  );\n  const _setUser = (_user: User | undefined) => {\n    setUser(_user);\n    onAuthChange(_user); // if someone's subscribed to auth changes, let 'em know\n    return _user; // so that we can continue chaining\n  };\n\n  React.useEffect(() => {\n    if (enableRunRoutes) {\n      runRoutes(goTrueInstance, _setUser);\n    }\n  }, []);\n\n  /******* OPERATIONS */\n  // make sure the Registration preferences under Identity settings in your Netlify dashboard are set to Open.\n  // https://react-netlify-identity.netlify.com/login#access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTY0ODY3MjEsInN1YiI6ImNiZjY5MTZlLTNlZGYtNGFkNS1iOTYzLTQ4ZTY2NDcyMDkxNyIsImVtYWlsIjoic2hhd250aGUxQGdtYWlsLmNvbSIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImdpdGh1YiJ9LCJ1c2VyX21ldGFkYXRhIjp7ImF2YXRhcl91cmwiOiJodHRwczovL2F2YXRhcnMxLmdpdGh1YnVzZXJjb250ZW50LmNvbS91LzY3NjQ5NTc_dj00IiwiZnVsbF9uYW1lIjoic3d5eCJ9fQ.E8RrnuCcqq-mLi1_Q5WHJ-9THIdQ3ha1mePBKGhudM0&expires_in=3600&refresh_token=OyA_EdRc7WOIVhY7RiRw5w&token_type=bearer\n  /******* external oauth */\n  type Provider = 'bitbucket' | 'github' | 'gitlab' | 'google';\n\n  const loginProvider = (provider: Provider) => {\n    const url = goTrueInstance.loginExternalUrl(provider);\n    window.location.href = url;\n  };\n  const acceptInviteExternalUrl = (provider: Provider, token: string) =>\n    goTrueInstance.acceptInviteExternalUrl(provider, token);\n  const _settings = goTrueInstance.settings.bind(goTrueInstance);\n  const [settings, setSettings] = React.useState<Settings>(defaultSettings);\n  React.useEffect(() => {\n    _settings().then(x => setSettings(x));\n  }, []);\n\n  /******* email auth */\n  const signupUser = (email: string, password: string, data: Object) =>\n    goTrueInstance.signup(email, password, data).then(_setUser); // TODO: make setUser optional?\n  const loginUser = (\n    email: string,\n    password: string,\n    remember: boolean = true\n  ) => goTrueInstance.login(email, password, remember).then(_setUser);\n  const requestPasswordRecovery = (email: string) =>\n    goTrueInstance.requestPasswordRecovery(email);\n  const recoverAccount = (token: string, remember?: boolean | undefined) =>\n    goTrueInstance.recover(token, remember);\n  const updateUser = (fields: { data: object }) => {\n    if (user == null) {\n      throw new Error('No current user found - are you logged in?');\n    } else {\n      return user!\n        .update(fields) // e.g. { data: { email: \"example@example.com\", password: \"password\" } }\n        .then(_setUser);\n    }\n  };\n  const getFreshJWT = () => {\n    if (!user) throw new Error('No current user found - are you logged in?');\n    return user.jwt();\n  };\n  const logoutUser = () => {\n    if (!user) throw new Error('No current user found - are you logged in?');\n    return user.logout().then(() => _setUser(undefined));\n  };\n\n  const genericAuthedFetch = (method: string) => (\n    endpoint: string,\n    obj = {}\n  ) => {\n    if (!user || !user.token || !user.token.access_token)\n      throw new Error('no user token found');\n    const defaultObj = {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + user.token.access_token,\n      },\n    };\n    const finalObj = Object.assign(defaultObj, { method }, obj);\n    return fetch(endpoint, finalObj).then(res =>\n      finalObj.headers['Content-Type'] === 'application/json' ? res.json() : res\n    );\n  };\n  const authedFetch = {\n    get: genericAuthedFetch('GET'),\n    post: genericAuthedFetch('POST'),\n    put: genericAuthedFetch('PUT'),\n    delete: genericAuthedFetch('DELETE'),\n  };\n\n  /******* hook API */\n  return {\n    user,\n    /** not meant for normal use! you should mostly use one of the other exported methods to update the user instance */\n    setUser,\n    isConfirmedUser: !!(user && user.confirmed_at),\n    isLoggedIn: !!user,\n    signupUser,\n    loginUser,\n    logoutUser,\n    requestPasswordRecovery,\n    recoverAccount,\n    updateUser,\n    getFreshJWT,\n    authedFetch,\n    _goTrueInstance: goTrueInstance,\n    _url: url,\n    loginProvider,\n    acceptInviteExternalUrl,\n    settings,\n  };\n}\n\n/**\n *\n *\n * Utils\n *\n */\n\nfunction validateUrl(value: string) {\n  return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(\n    value\n  );\n}\n\n// lazy initialize contexts without providing a Nullable type upfront\nfunction createCtx<A>() {\n  const ctx = React.createContext<A | undefined>(undefined);\n  function useCtx() {\n    const c = React.useContext(ctx);\n    if (!c) throw new Error('useCtx must be inside a Provider with a value');\n    return c;\n  }\n  return [useCtx, ctx.Provider] as const;\n}\n\n// // Deprecated for now\n// interface NIProps {\n//   children: any\n//   url: string\n//   onAuthChange?: authChangeParam\n// }\n// export default function NetlifyIdentity({ children, url, onAuthChange }: NIProps) {\n//   return children(useNetlifyIdentity(url, onAuthChange))\n// }\n"],"names":["routes","errorRoute","accessTokenRoute","confirmationRoute","defaultSettings","autoconfirm","disable_signup","external","bitbucket","email","facebook","github","gitlab","google","createCtx","_IdentityCtxProvider","useIdentityContext","IdentityContextProvider","url","children","onAuthChange","test","Error","identity","useNetlifyIdentity","React","value","enableRunRoutes","goTrueInstance","useMemo","GoTrue","APIUrl","setCookie","useState","currentUser","undefined","user","setUser","_setUser","_user","useEffect","gotrue","remember","hash","document","location","replace","match","params","split","forEach","pair","cookie","createUser","then","console","error","confirm","runRoutes","_settings","settings","bind","setSettings","x","genericAuthedFetch","method","endpoint","obj","token","access_token","finalObj","Object","assign","headers","Accept","Authorization","fetch","res","json","authedFetch","get","post","put","isConfirmedUser","confirmed_at","isLoggedIn","signupUser","password","data","signup","loginUser","login","logoutUser","logout","requestPasswordRecovery","recoverAccount","recover","updateUser","fields","update","getFreshJWT","jwt","_goTrueInstance","_url","loginProvider","provider","loginExternalUrl","window","href","acceptInviteExternalUrl","ctx","createContext","c","useContext","Provider"],"mappings":"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"}