"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
function createEslintConfig({ rootDir, writeFile, }) {
    const config = {
        extends: [
            'eslint:recommended',
            'plugin:@typescript-eslint/recommended',
            'prettier/@typescript-eslint',
            'plugin:prettier/recommended',
            'plugin:react/recommended',
        ],
        root: true,
        env: {
            node: true,
            es6: true,
            jest: true,
            browser: true,
        },
        parserOptions: {
            ecmaVersion: 2017,
            ecmaFeatures: {
                impliedStrict: true,
                jsx: true,
                experimentalObjectRestSpread: true,
            },
            sourceType: 'module',
        },
        parser: '@typescript-eslint/parser',
        plugins: ['@typescript-eslint'],
        rules: {
            'no-console': 'off',
            'no-empty': 'off',
            '@typescript-eslint/no-explicit-any': 'off',
            '@typescript-eslint/explicit-function-return-type': 'off',
            'no-unused-vars': 'off',
            '@typescript-eslint/no-unused-vars': [2, { args: 'none' }],
        },
        settings: {
            react: {
                version: 'detect',
            },
        },
    };
    if (writeFile) {
        const file = path_1.default.join(rootDir, '.eslintrc.js');
        if (fs_1.default.existsSync(file)) {
            console.error('Error trying to save the Eslint configuration file:', `${file} already exists.`);
        }
        else {
            try {
                fs_1.default.writeFileSync(file, `module.exports = ${JSON.stringify(config, null, 2)}`);
            }
            catch (e) {
                console.error(e);
            }
        }
    }
    return config;
}
exports.createEslintConfig = createEslintConfig;
