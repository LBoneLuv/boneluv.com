"use strict";

exports.__esModule = true;
exports.Dialog = exports.DialogContent = exports.DialogOverlay = void 0;

var _react = _interopRequireDefault(require("react"));

var _componentComponent = _interopRequireDefault(require("@reach/component-component"));

var _portal = _interopRequireDefault(require("@reach/portal"));

var _utils = require("@reach/utils");

var _reactFocusLock = _interopRequireDefault(require("react-focus-lock"));

var _reactRemoveScroll = require("react-remove-scroll");

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var createAriaHider = function createAriaHider(dialogNode) {
  var originalValues = [];
  var rootNodes = [];
  Array.prototype.forEach.call(document.querySelectorAll("body > *"), function (node) {
    var portalNode = dialogNode.parentNode.parentNode.parentNode;

    if (node === portalNode) {
      return;
    }

    var attr = node.getAttribute("aria-hidden");
    var alreadyHidden = attr !== null && attr !== "false";

    if (alreadyHidden) {
      return;
    }

    originalValues.push(attr);
    rootNodes.push(node);
    node.setAttribute("aria-hidden", "true");
  });
  return function () {
    rootNodes.forEach(function (node, index) {
      var originalValue = originalValues[index];

      if (originalValue === null) {
        node.removeAttribute("aria-hidden");
      } else {
        node.setAttribute("aria-hidden", originalValue);
      }
    });
  };
};

var k = function k() {};

var checkDialogStyles = function checkDialogStyles() {
  return (0, _utils.checkStyles)("dialog");
};

var portalDidMount = function portalDidMount(refs) {
  refs.disposeAriaHider = createAriaHider(refs.overlayNode);
};

var contentWillUnmount = function contentWillUnmount(_ref) {
  var refs = _ref.refs;
  refs.disposeAriaHider();
}; // eslint-disable-next-line no-unused-vars


var FocusContext = _react["default"].createContext();

var DialogOverlay = _react["default"].forwardRef(function (_ref2, forwardedRef) {
  var _ref2$isOpen = _ref2.isOpen,
      isOpen = _ref2$isOpen === void 0 ? true : _ref2$isOpen,
      _ref2$onDismiss = _ref2.onDismiss,
      onDismiss = _ref2$onDismiss === void 0 ? k : _ref2$onDismiss,
      onMouseDown = _ref2.onMouseDown,
      initialFocusRef = _ref2.initialFocusRef,
      onClick = _ref2.onClick,
      onKeyDown = _ref2.onKeyDown,
      props = _objectWithoutPropertiesLoose(_ref2, ["isOpen", "onDismiss", "onMouseDown", "initialFocusRef", "onClick", "onKeyDown"]);

  return _react["default"].createElement(_componentComponent["default"], {
    didMount: checkDialogStyles
  }, isOpen ? _react["default"].createElement(_portal["default"], {
    "data-reach-dialog-wrapper": true
  }, _react["default"].createElement(_componentComponent["default"], {
    refs: {
      overlayNode: null,
      mouseDownTarget: null
    },
    didMount: function didMount(_ref3) {
      var refs = _ref3.refs;
      portalDidMount(refs);
    },
    willUnmount: contentWillUnmount
  }, function (_ref4) {
    var refs = _ref4.refs;
    return _react["default"].createElement(_reactFocusLock["default"], {
      returnFocus: true,
      onActivation: function onActivation() {
        if (initialFocusRef) {
          initialFocusRef.current.focus();
        }
      }
    }, _react["default"].createElement(_reactRemoveScroll.RemoveScroll, null, _react["default"].createElement("div", _extends({
      "data-reach-dialog-overlay": true,
      onClick: (0, _utils.wrapEvent)(onClick, function (event) {
        if (refs.mouseDownTarget === event.target) {
          event.stopPropagation();
          onDismiss(event);
        }
      }),
      onMouseDown: (0, _utils.wrapEvent)(onMouseDown, function (event) {
        refs.mouseDownTarget = event.target;
      }),
      onKeyDown: (0, _utils.wrapEvent)(onKeyDown, function (event) {
        if (event.key === "Escape") {
          event.stopPropagation();
          onDismiss(event);
        }
      }),
      ref: function ref(node) {
        refs.overlayNode = node;
        (0, _utils.assignRef)(forwardedRef, node);
      }
    }, props))));
  })) : null);
});

exports.DialogOverlay = DialogOverlay;
DialogOverlay.propTypes = {
  initialFocusRef: function initialFocusRef() {}
};

var stopPropagation = function stopPropagation(event) {
  return event.stopPropagation();
};

var DialogContent = _react["default"].forwardRef(function (_ref5, forwardedRef) {
  var onClick = _ref5.onClick,
      onKeyDown = _ref5.onKeyDown,
      props = _objectWithoutPropertiesLoose(_ref5, ["onClick", "onKeyDown"]);

  return _react["default"].createElement("div", _extends({
    "aria-modal": "true",
    "data-reach-dialog-content": true,
    tabIndex: "-1",
    onClick: (0, _utils.wrapEvent)(onClick, stopPropagation),
    ref: function ref(node) {
      (0, _utils.assignRef)(forwardedRef, node);
    }
  }, props));
});

exports.DialogContent = DialogContent;

var Dialog = function Dialog(_ref6) {
  var isOpen = _ref6.isOpen,
      _ref6$onDismiss = _ref6.onDismiss,
      onDismiss = _ref6$onDismiss === void 0 ? k : _ref6$onDismiss,
      initialFocusRef = _ref6.initialFocusRef,
      props = _objectWithoutPropertiesLoose(_ref6, ["isOpen", "onDismiss", "initialFocusRef"]);

  return _react["default"].createElement(DialogOverlay, {
    isOpen: isOpen,
    onDismiss: onDismiss,
    initialFocusRef: initialFocusRef
  }, _react["default"].createElement(DialogContent, props));
};

exports.Dialog = Dialog;
Dialog.propTypes = {
  isOpen: _propTypes.bool,
  onDismiss: _propTypes.func
};