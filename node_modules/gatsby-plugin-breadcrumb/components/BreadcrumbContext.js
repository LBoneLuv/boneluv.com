"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.BreadcrumbConsumer = exports.BreadcrumbProvider = exports.BreadcrumbContext = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

/* eslint-disable import/no-extraneous-dependencies */
var BreadcrumbContext = _react["default"].createContext('Breadcrumb');

exports.BreadcrumbContext = BreadcrumbContext;

var BreadcrumbProvider = function BreadcrumbProvider(_ref) {
  var children = _ref.children,
      _ref$setHome = _ref.setHome,
      setHome = _ref$setHome === void 0 ? null : _ref$setHome;
  var defaultCrumb = {};

  if (setHome) {
    defaultCrumb = (0, _extends2["default"])({}, setHome.location, {
      crumbLabel: setHome.crumbLabel,
      crumbStyle: setHome.crumbStyle,
      crumbActiveStyle: setHome.crumbActiveStyle,
      crumbSeparator: setHome.crumbSeparator
    });
  }

  var _React$useState = _react["default"].useState([(0, _extends2["default"])({}, defaultCrumb)]),
      crumbs = _React$useState[0],
      setCrumbs = _React$useState[1];

  var updateCrumbs = function updateCrumbs(_ref2) {
    var location = _ref2.location,
        crumbLabel = _ref2.crumbLabel,
        crumbSeparator = _ref2.crumbSeparator,
        crumbStyle = _ref2.crumbStyle,
        crumbActiveStyle = _ref2.crumbActiveStyle;

    if (location.state && location.state.crumbClicked || crumbs.find(function (crumb) {
      return crumb.pathname === location.pathname && crumbs.length > 0;
    })) {
      var removeAfter = crumbs.findIndex(function (crumb) {
        return crumb.pathname === location.pathname;
      });
      crumbs.splice(removeAfter + 1);
      setCrumbs([].concat(crumbs));
    } else {
      setCrumbs([].concat(crumbs, [(0, _extends2["default"])({}, location, {
        crumbLabel: crumbLabel,
        crumbSeparator: crumbSeparator,
        crumbStyle: crumbStyle,
        crumbActiveStyle: crumbActiveStyle
      })]));
    }
  };

  var crumb = {
    crumbs: crumbs,
    updateCrumbs: updateCrumbs
  };
  return _react["default"].createElement(BreadcrumbContext.Provider, {
    value: crumb
  }, children);
};

exports.BreadcrumbProvider = BreadcrumbProvider;
var BreadcrumbConsumer = BreadcrumbContext.Consumer;
exports.BreadcrumbConsumer = BreadcrumbConsumer;
BreadcrumbProvider.defaultProps = {
  setHome: {}
};
BreadcrumbProvider.propTypes = {
  children: _propTypes["default"].node.isRequired,
  setHome: _propTypes["default"].shape({
    location: _propTypes["default"].shape({
      state: _propTypes["default"].shape({
        crumbClicked: _propTypes["default"].bool
      }),
      pathname: _propTypes["default"].string
    }),
    crumbLabel: _propTypes["default"].string,
    crumbSeparator: _propTypes["default"].string,
    crumbStyle: _propTypes["default"].shape(),
    crumbActiveStyle: _propTypes["default"].shape()
  })
};