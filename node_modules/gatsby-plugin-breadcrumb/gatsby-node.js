"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

exports.onCreatePage = function (_ref, pluginOptions) {
  var page = _ref.page,
      actions = _ref.actions;

  // TODO: remove useSitemap before v7 release
  if (pluginOptions.useSitemap || pluginOptions.useAutoGen) {
    var createPage = actions.createPage,
        deletePage = actions.deletePage;
    var defaultOptions = {
      exclude: ["/dev-404-page", "/404", "/404.html", "/offline-plugin-app-shell-fallback"]
    };
    var optionsActual = (0, _extends2["default"])({}, defaultOptions, {}, pluginOptions);

    if (!optionsActual.exclude.includes(page.path)) {
      var acc = '';
      var crumbs = [];
      var splitUrl = page.path.split('/');
      splitUrl.forEach(function (split, index) {
        if (index === 0 && split === '') {
          crumbs = [].concat(crumbs, [{
            pathname: '/',
            // TODO: remove sitemapHomeLabel option before v7 release
            crumbLabel: optionsActual.sitemapHomeLabel || optionsActual.autoGenHomeLabel || 'Home'
          }]);
        } else if (index !== 0 && split !== '') {
          acc += "/" + split;
          var n = acc.lastIndexOf('/');
          crumbs = [].concat(crumbs, [{
            pathname: acc,
            crumbLabel: acc.slice(n + 1).replace(/%20/g, ' ')
          }]);
        } else {
          crumbs = [].concat(crumbs);
        }
      });
      var breadcrumb = {
        location: page.path,
        crumbs: crumbs
      };
      var oldPageContext = page.context;
      deletePage(page);
      createPage((0, _extends2["default"])({}, page, {
        context: (0, _extends2["default"])({}, oldPageContext, {
          breadcrumb: breadcrumb
        })
      }));
    }
  }
};