(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('@reach/dialog'), require('@reach/visually-hidden'), require('react-netlify-identity'), require('@reach/tabs')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', '@reach/dialog', '@reach/visually-hidden', 'react-netlify-identity', '@reach/tabs'], factory) :
  (global = global || self, factory(global['react-netlify-identity-widget'] = {}, global.React, global.dialog, global.VisuallyHidden, global.reactNetlifyIdentity, global.tabs));
}(this, function (exports, React, dialog, VisuallyHidden, reactNetlifyIdentity, tabs) { 'use strict';

  React = React && React.hasOwnProperty('default') ? React['default'] : React;
  VisuallyHidden = VisuallyHidden && VisuallyHidden.hasOwnProperty('default') ? VisuallyHidden['default'] : VisuallyHidden;

  function useLoading() {
    const [isLoading, setState] = React.useState(false);
    const mount = React.useRef(false);
    React.useEffect(() => {
      mount.current = true;
      return () => void (mount.current = false);
    }, []);

    function load(aPromise) {
      setState(true);
      return aPromise.finally(() => mount.current && setState(false));
    }

    return [isLoading, load];
  }

  function Login() {
    const {
      loginUser
    } = reactNetlifyIdentity.useIdentityContext();
    const formRef = React.useRef(null);
    const [msg, setMsg] = React.useState("");
    const [isLoading, load] = useLoading(); // const signup = () => {
    //   if (!formRef.current) return
    //   const email = formRef.current.email.value
    //   const password = formRef.current.password.value
    //   const data = { signupSource: "react-netlify-identity-widget" }
    //   load(signupUser(email, password, data))
    //     .then(user => {
    //       console.log("Success! Signed up", user)
    //       // navigate("/dashboard")
    //     })
    //     .catch(err => void console.error(err) || setMsg("Error: " + err.message))
    // }

    return React.createElement("form", {
      ref: formRef,
      className: "form",
      onSubmit: e => {
        e.preventDefault();
        const target = e.target;
        const email = target.email.value;
        const password = target.password.value;
        load(loginUser(email, password, true)).then(user => {
          console.log("Success! Logged in", user); // navigate("/dashboard")
        }).catch(err => void console.error(err) || setMsg("Error: " + err.message));
      }
    }, React.createElement("div", {
      className: "formGroup",
      key: "email"
    }, React.createElement("label", null, React.createElement(VisuallyHidden, null, "Enter your email"), React.createElement("input", {
      className: "formControl",
      type: "email",
      name: "email",
      placeholder: "Email",
      autoCapitalize: "off",
      required: true
    }), React.createElement("div", {
      className: "inputFieldIcon inputFieldEmail"
    }))), React.createElement("div", {
      className: "formGroup",
      key: "password"
    }, React.createElement("label", null, React.createElement(VisuallyHidden, null, "Enter your password"), React.createElement("input", {
      className: "formControl",
      type: "password",
      name: "password",
      placeholder: "Password",
      required: true
    }), React.createElement("div", {
      className: "inputFieldIcon inputFieldPassword"
    }))), React.createElement("div", null, React.createElement("button", {
      type: "submit",
      className: isLoading ? "btn saving" : "btn"
    }, "Log in"), msg && React.createElement("pre", {
      style: {
        background: "salmon",
        padding: 10
      }
    }, msg)), React.createElement("button", {
      type: "button",
      className: "btnLink forgotPasswordLink"
    }, "Forgot password?"));
  }

  function Logout() {
    const identity = reactNetlifyIdentity.useIdentityContext();
    const name = identity && identity.user && identity.user.user_metadata && identity.user.user_metadata.full_name || "NoName";
    const [isLoading, load] = useLoading();

    const logout = () => load(identity.logoutUser());

    return React.createElement(React.Fragment, null, React.createElement("div", {
      className: "header"
    }, React.createElement("button", {
      className: "btn btnHeader active"
    }, "Logged in")), React.createElement("form", {
      className: "form "
    }, React.createElement("p", {
      className: "infoText"
    }, "Logged in as ", React.createElement("br", null), React.createElement("span", {
      className: "infoTextEmail"
    }, name)), React.createElement("button", {
      type: "submit",
      className: isLoading ? "btn saving" : "btn",
      onClick: logout
    }, "Log out")));
  }

  function Signup() {
    const {
      signupUser
    } = reactNetlifyIdentity.useIdentityContext();
    const formRef = React.useRef(null);
    const [msg, setMsg] = React.useState("");
    const [isLoading, load] = useLoading();

    const signup = () => {
      if (!formRef.current) return;
      const full_name = formRef.current.username.value;
      const email = formRef.current.email.value;
      const password = formRef.current.password.value;
      const data = {
        signupSource: "react-netlify-identity-widget",
        full_name
      };
      load(signupUser(email, password, data)).then(user => {
        console.log("Success! Signed up", user); // navigate("/dashboard")
      }).catch(err => void console.error(err) || setMsg("Error: " + err.message));
    };

    return React.createElement("form", {
      ref: formRef,
      className: "form",
      onSubmit: e => {
        e.preventDefault();
        signup();
      }
    }, React.createElement("div", {
      className: "formGroup",
      key: "username"
    }, React.createElement("label", null, React.createElement(VisuallyHidden, null, "Enter your name"), React.createElement("input", {
      id: "username",
      className: "formControl",
      type: "name",
      name: "username",
      placeholder: "Name",
      autoCapitalize: "off",
      required: true
    }), React.createElement("div", {
      className: "inputFieldIcon inputFieldName"
    }))), React.createElement("div", {
      className: "formGroup",
      key: "email"
    }, React.createElement("label", null, React.createElement(VisuallyHidden, null, "Enter your email"), React.createElement("input", {
      className: "formControl",
      type: "email",
      name: "email",
      placeholder: "Email",
      autoCapitalize: "off",
      required: true
    }), React.createElement("div", {
      className: "inputFieldIcon inputFieldEmail"
    }))), React.createElement("div", {
      className: "formGroup",
      key: "password"
    }, React.createElement("label", null, React.createElement(VisuallyHidden, null, "Enter your password"), React.createElement("input", {
      className: "formControl",
      type: "password",
      name: "password",
      placeholder: "Password",
      required: true
    }), React.createElement("div", {
      className: "inputFieldIcon inputFieldPassword"
    }))), React.createElement("div", null, React.createElement("button", {
      type: "submit",
      className: isLoading ? "btn saving" : "btn"
    }, "Sign Up"), msg && React.createElement("pre", {
      style: {
        background: "salmon",
        padding: 10
      }
    }, msg)));
  }

  function Providers() {
    const {
      settings
    } = reactNetlifyIdentity.useIdentityContext();
    const hasProviders = Object.entries(settings.external).some(([k, v]) => ["github", "gitlab", "bitbucket", "google"].includes(k) && v);
    if (!hasProviders) return null;
    let isLocalhost = false;

    if (typeof window !== "undefined") {
      isLocalhost = Boolean(window.location.hostname === "localhost" || // [::1] is the IPv6 localhost address.
      window.location.hostname === "[::1]" || // 127.0.0.1/8 is considered localhost for IPv4.
      window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));
    }

    return React.createElement("div", {
      className: "providersGroup"
    }, isLocalhost && React.createElement("pre", null, "\u26A0\uFE0FTesting providers on localhost won't work because OAuth redirects to your production site"), React.createElement("hr", {
      className: "hr"
    }), React.createElement(ProviderButton, {
      settings: settings,
      provider: "Google"
    }), React.createElement(ProviderButton, {
      settings: settings,
      provider: "GitHub"
    }), React.createElement(ProviderButton, {
      settings: settings,
      provider: "GitLab"
    }), React.createElement(ProviderButton, {
      settings: settings,
      provider: "Bitbucket"
    }));
  }

  function ProviderButton({
    settings,
    provider
  }) {
    const ext = settings.external;
    if (!ext[provider.toLowerCase()]) return null;
    const {
      loginProvider
    } = reactNetlifyIdentity.useIdentityContext();

    const click = () => loginProvider(provider.toLowerCase());

    return React.createElement("button", {
      onClick: click,
      className: `provider${provider} btn btnProvider`
    }, "Continue with ", provider);
  }

  function LoggedOutScreen() {
    return React.createElement("div", null, React.createElement(tabs.Tabs, {
      defaultIndex: 0
    }, React.createElement(tabs.TabList, {
      className: "header"
    }, React.createElement(tabs.Tab, {
      className: "btn btnHeader"
    }, "Login"), React.createElement(tabs.Tab, {
      className: "btn btnHeader"
    }, "Sign Up")), React.createElement(tabs.TabPanels, null, React.createElement(tabs.TabPanel, null, React.createElement(Login, null)), React.createElement(tabs.TabPanel, null, React.createElement(Signup, null)))), React.createElement(Providers, null));
  }

  function LoggedInScreen() {
    return React.createElement(Logout, null);
  }

  function Gate({}) {
    const identity = reactNetlifyIdentity.useIdentityContext();
    const isLoggedIn = Boolean(identity && identity.user);
    return isLoggedIn ? React.createElement(LoggedInScreen, null) : React.createElement(LoggedOutScreen, null);
  }

  function Widget({
    onCloseDialog
  }) {
    return React.createElement(Gate, {
      onCloseDialog: onCloseDialog
    });
  }

  class ErrorBoundary extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        hasError: false
      };
    }

    static getDerivedStateFromError() {
      // Update state so the next render will show the fallback UI.
      return {
        hasError: true
      };
    }

    render() {
      if (this.state.hasError) {
        // You can render any custom fallback UI
        return React.createElement("h1", null, "Something went loading the widget.");
      }

      return this.props.children;
    }

  }

  const IdentityContextProvider = reactNetlifyIdentity.IdentityContextProvider;
  const useIdentityContext = reactNetlifyIdentity.useIdentityContext;
  function IdentityModal({
    showDialog,
    onCloseDialog
  }) {
    return React.createElement(dialog.Dialog, {
      isOpen: showDialog,
      onDismiss: onCloseDialog,
      style: {
        border: "solid 5px hsla(0, 0%, 0%, 0.5)",
        borderRadius: "10px",
        position: "relative",
        maxWidth: 400
      }
    }, React.createElement("button", {
      className: "btn btnClose",
      onClick: onCloseDialog
    }, React.createElement(VisuallyHidden, null, "Close")), React.createElement(ErrorBoundary, null, React.createElement(React.Suspense, {
      fallback: React.createElement("div", null, "Loading...")
    }, React.createElement(Widget, {
      onCloseDialog: onCloseDialog
    }))));
  }

  Object.defineProperty(exports, 'useNetlifyIdentity', {
    enumerable: true,
    get: function () {
      return reactNetlifyIdentity.useNetlifyIdentity;
    }
  });
  exports.IdentityContextProvider = IdentityContextProvider;
  exports.IdentityModal = IdentityModal;
  exports.default = IdentityModal;
  exports.useIdentityContext = useIdentityContext;

}));
//# sourceMappingURL=react-netlify-identity-widget.umd.development.js.map
