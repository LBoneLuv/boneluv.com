import React from "react";
export declare const useIdentityContext: () => {
    user: import("gotrue-js").User | undefined;
    setUser: React.Dispatch<React.SetStateAction<import("gotrue-js").User | undefined>>;
    isConfirmedUser: boolean;
    isLoggedIn: boolean;
    signupUser: (email: string, password: string, data: Object) => Promise<import("gotrue-js").User | undefined>;
    loginUser: (email: string, password: string, remember?: boolean | undefined) => Promise<import("gotrue-js").User | undefined>;
    logoutUser: () => Promise<import("gotrue-js").User | undefined>;
    requestPasswordRecovery: (email: string) => Promise<void>;
    recoverAccount: (token: string, remember?: boolean | undefined) => Promise<import("gotrue-js").User>;
    updateUser: (fields: Object) => Promise<import("gotrue-js").User | undefined>;
    getFreshJWT: () => Promise<string>;
    authedFetch: {
        get: (endpoint: string, obj?: {} | undefined) => Promise<any>;
        post: (endpoint: string, obj?: {} | undefined) => Promise<any>;
        put: (endpoint: string, obj?: {} | undefined) => Promise<any>;
        delete: (endpoint: string, obj?: {} | undefined) => Promise<any>;
    };
    _goTrueInstance: import("gotrue-js").default;
    _domain: string;
    loginProvider: (provider: "bitbucket" | "facebook" | "github" | "gitlab" | "google") => void;
    acceptInviteExternalUrl: (provider: "bitbucket" | "facebook" | "github" | "gitlab" | "google", token: string) => string;
    settings: () => Promise<import("gotrue-js").Settings>;
}, IdentityContextProvider: React.ProviderExoticComponent<React.ProviderProps<{
    user: import("gotrue-js").User | undefined;
    setUser: React.Dispatch<React.SetStateAction<import("gotrue-js").User | undefined>>;
    isConfirmedUser: boolean;
    isLoggedIn: boolean;
    signupUser: (email: string, password: string, data: Object) => Promise<import("gotrue-js").User | undefined>;
    loginUser: (email: string, password: string, remember?: boolean | undefined) => Promise<import("gotrue-js").User | undefined>;
    logoutUser: () => Promise<import("gotrue-js").User | undefined>;
    requestPasswordRecovery: (email: string) => Promise<void>;
    recoverAccount: (token: string, remember?: boolean | undefined) => Promise<import("gotrue-js").User>;
    updateUser: (fields: Object) => Promise<import("gotrue-js").User | undefined>;
    getFreshJWT: () => Promise<string>;
    authedFetch: {
        get: (endpoint: string, obj?: {} | undefined) => Promise<any>;
        post: (endpoint: string, obj?: {} | undefined) => Promise<any>;
        put: (endpoint: string, obj?: {} | undefined) => Promise<any>;
        delete: (endpoint: string, obj?: {} | undefined) => Promise<any>;
    };
    _goTrueInstance: import("gotrue-js").default;
    _domain: string;
    loginProvider: (provider: "bitbucket" | "facebook" | "github" | "gitlab" | "google") => void;
    acceptInviteExternalUrl: (provider: "bitbucket" | "facebook" | "github" | "gitlab" | "google", token: string) => string;
    settings: () => Promise<import("gotrue-js").Settings>;
} | undefined>>, IdentityContext: React.Context<{
    user: import("gotrue-js").User | undefined;
    setUser: React.Dispatch<React.SetStateAction<import("gotrue-js").User | undefined>>;
    isConfirmedUser: boolean;
    isLoggedIn: boolean;
    signupUser: (email: string, password: string, data: Object) => Promise<import("gotrue-js").User | undefined>;
    loginUser: (email: string, password: string, remember?: boolean | undefined) => Promise<import("gotrue-js").User | undefined>;
    logoutUser: () => Promise<import("gotrue-js").User | undefined>;
    requestPasswordRecovery: (email: string) => Promise<void>;
    recoverAccount: (token: string, remember?: boolean | undefined) => Promise<import("gotrue-js").User>;
    updateUser: (fields: Object) => Promise<import("gotrue-js").User | undefined>;
    getFreshJWT: () => Promise<string>;
    authedFetch: {
        get: (endpoint: string, obj?: {} | undefined) => Promise<any>;
        post: (endpoint: string, obj?: {} | undefined) => Promise<any>;
        put: (endpoint: string, obj?: {} | undefined) => Promise<any>;
        delete: (endpoint: string, obj?: {} | undefined) => Promise<any>;
    };
    _goTrueInstance: import("gotrue-js").default;
    _domain: string;
    loginProvider: (provider: "bitbucket" | "facebook" | "github" | "gitlab" | "google") => void;
    acceptInviteExternalUrl: (provider: "bitbucket" | "facebook" | "github" | "gitlab" | "google", token: string) => string;
    settings: () => Promise<import("gotrue-js").Settings>;
} | undefined>;
export declare const SettingContext: React.Context<import("gotrue-js").Settings | null>;
export declare const FormStateContext: React.Context<{
    state: "login" | "signup";
    update: React.Dispatch<React.SetStateAction<"login" | "signup">>;
}>, FormStateContextProvider: (props: {
    children?: React.ReactNode;
}) => JSX.Element;
