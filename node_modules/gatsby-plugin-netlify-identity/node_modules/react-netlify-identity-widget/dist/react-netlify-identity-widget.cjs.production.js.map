{"version":3,"file":"react-netlify-identity-widget.cjs.production.js","sources":["../src/useLoading.tsx","../src/components/login.tsx","../src/components/logout.tsx","../src/components/signup.tsx","../src/components/providers.tsx","../src/app.tsx","../src/errorBoundary.tsx","../src/index.tsx"],"sourcesContent":["import React from \"react\"\n\nexport default function useLoading() {\n  const [isLoading, setState] = React.useState(false)\n  const mount = React.useRef(false)\n  React.useEffect(() => {\n    mount.current = true\n    return () => void (mount.current = false)\n  }, [])\n  function load<A>(aPromise: Promise<A>) {\n    setState(true)\n    return aPromise.finally(() => mount.current && setState(false))\n  }\n  return [isLoading, load] as [boolean, <A>(aPromise: Promise<A>) => Promise<A>]\n}\n","import React from \"react\"\nimport { useIdentityContext } from \"react-netlify-identity\"\nimport useLoading from \"../useLoading\"\nimport VisuallyHidden from \"@reach/visually-hidden\"\n\nexport function Login() {\n  const { loginUser } = useIdentityContext()\n  const formRef = React.useRef<HTMLFormElement>(null)\n  const [msg, setMsg] = React.useState(\"\")\n  const [isLoading, load] = useLoading()\n  // const signup = () => {\n  //   if (!formRef.current) return\n  //   const email = formRef.current.email.value\n  //   const password = formRef.current.password.value\n  //   const data = { signupSource: \"react-netlify-identity-widget\" }\n  //   load(signupUser(email, password, data))\n  //     .then(user => {\n  //       console.log(\"Success! Signed up\", user)\n  //       // navigate(\"/dashboard\")\n  //     })\n  //     .catch(err => void console.error(err) || setMsg(\"Error: \" + err.message))\n  // }\n  return (\n    <form\n      ref={formRef}\n      className=\"form\"\n      onSubmit={(e: React.SyntheticEvent) => {\n        e.preventDefault()\n        const target = e.target as typeof e.target & { email: { value: string }; password: { value: string } }\n        const email = target.email.value\n        const password = target.password.value\n        load(loginUser(email, password, true))\n          .then((user) => {\n            console.log(\"Success! Logged in\", user)\n            // navigate(\"/dashboard\")\n          })\n          .catch((err) => void console.error(err) || setMsg(\"Error: \" + err.message))\n      }}\n    >\n      <div className=\"formGroup\" key=\"email\">\n        <label>\n          <VisuallyHidden>Enter your email</VisuallyHidden>\n          <input\n            className=\"formControl\"\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Email\"\n            autoCapitalize=\"off\"\n            required={true}\n          />\n          <div className=\"inputFieldIcon inputFieldEmail\" />\n        </label>\n      </div>\n      <div className=\"formGroup\" key=\"password\">\n        <label>\n          <VisuallyHidden>Enter your password</VisuallyHidden>\n          <input className=\"formControl\" type=\"password\" name=\"password\" placeholder=\"Password\" required={true} />\n          <div className=\"inputFieldIcon inputFieldPassword\" />\n        </label>\n      </div>\n\n      <div>\n        <button type=\"submit\" className={isLoading ? \"btn saving\" : \"btn\"}>\n          Log in\n        </button>\n        {msg && <pre style={{ background: \"salmon\", padding: 10 }}>{msg}</pre>}\n      </div>\n      <button type=\"button\" className=\"btnLink forgotPasswordLink\">\n        Forgot password?\n      </button>\n    </form>\n  )\n}\n","import React from \"react\"\nimport { useIdentityContext } from \"react-netlify-identity\"\nimport useLoading from \"../useLoading\"\n\nexport function Logout() {\n  const identity = useIdentityContext()\n  const name =\n    (identity && identity.user && identity.user.user_metadata && identity.user.user_metadata.full_name) || \"NoName\"\n\n  const [isLoading, load] = useLoading()\n  const logout = () => load(identity.logoutUser())\n  return (\n    <>\n      <div className=\"header\">\n        <button className=\"btn btnHeader active\">Logged in</button>\n      </div>\n      <form className=\"form \">\n        <p className=\"infoText\">\n          Logged in as <br />\n          <span className=\"infoTextEmail\">{name}</span>\n        </p>\n        <button type=\"submit\" className={isLoading ? \"btn saving\" : \"btn\"} onClick={logout}>\n          Log out\n        </button>\n      </form>\n    </>\n  )\n}\n","import React from \"react\"\nimport { useIdentityContext } from \"react-netlify-identity\"\nimport useLoading from \"../useLoading\"\nimport VisuallyHidden from \"@reach/visually-hidden\"\n\nexport function Signup() {\n  const { signupUser } = useIdentityContext()\n  const formRef = React.useRef<HTMLFormElement>(null)\n  const [msg, setMsg] = React.useState(\"\")\n  const [isLoading, load] = useLoading()\n  const signup = () => {\n    if (!formRef.current) return\n    const full_name = formRef.current.username.value\n    const email = formRef.current.email.value\n    const password = formRef.current.password.value\n    const data = { signupSource: \"react-netlify-identity-widget\", full_name }\n    load(signupUser(email, password, data))\n      .then((user) => {\n        console.log(\"Success! Signed up\", user)\n        // navigate(\"/dashboard\")\n      })\n      .catch((err) => void console.error(err) || setMsg(\"Error: \" + err.message))\n  }\n  return (\n    <form\n      ref={formRef}\n      className=\"form\"\n      onSubmit={(e: React.SyntheticEvent) => {\n        e.preventDefault()\n        signup()\n      }}\n    >\n      <div className=\"formGroup\" key=\"username\">\n        <label>\n          <VisuallyHidden>Enter your name</VisuallyHidden>\n          <input\n            id=\"username\"\n            className=\"formControl\"\n            type=\"name\"\n            name=\"username\"\n            placeholder=\"Name\"\n            autoCapitalize=\"off\"\n            required={true}\n          />\n          <div className=\"inputFieldIcon inputFieldName\" />\n        </label>\n      </div>\n      <div className=\"formGroup\" key=\"email\">\n        <label>\n          <VisuallyHidden>Enter your email</VisuallyHidden>\n          <input\n            className=\"formControl\"\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Email\"\n            autoCapitalize=\"off\"\n            required={true}\n          />\n          <div className=\"inputFieldIcon inputFieldEmail\" />\n        </label>\n      </div>\n      <div className=\"formGroup\" key=\"password\">\n        <label>\n          <VisuallyHidden>Enter your password</VisuallyHidden>\n          <input className=\"formControl\" type=\"password\" name=\"password\" placeholder=\"Password\" required={true} />\n          <div className=\"inputFieldIcon inputFieldPassword\" />\n        </label>\n      </div>\n      <div>\n        <button type=\"submit\" className={isLoading ? \"btn saving\" : \"btn\"}>\n          Sign Up\n        </button>\n        {msg && <pre style={{ background: \"salmon\", padding: 10 }}>{msg}</pre>}\n      </div>\n    </form>\n  )\n}\n","import React from \"react\"\nimport { Settings, useIdentityContext } from \"react-netlify-identity\"\n\nexport function Providers() {\n  const { settings } = useIdentityContext()\n  const hasProviders = Object.entries(settings.external).some(\n    ([k, v]) => [\"github\", \"gitlab\", \"bitbucket\", \"google\"].includes(k) && v\n  )\n  if (!hasProviders) return null\n  let isLocalhost = false\n  if (typeof window !== \"undefined\") {\n    isLocalhost = Boolean(\n      window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n    )\n  }\n  return (\n    <div className=\"providersGroup\">\n      {isLocalhost && (\n        <pre>⚠️Testing providers on localhost won't work because OAuth redirects to your production site</pre>\n      )}\n      <hr className=\"hr\" />\n      <ProviderButton settings={settings} provider=\"Google\" />\n      <ProviderButton settings={settings} provider=\"GitHub\" />\n      <ProviderButton settings={settings} provider=\"GitLab\" />\n      <ProviderButton settings={settings} provider=\"Bitbucket\" />\n    </div>\n  )\n}\n\ninterface Dict<T> {\n  [id: string]: T\n}\nfunction ProviderButton({ settings, provider }: { settings: Settings; provider: string }) {\n  const ext = settings.external as Dict<{}>\n  if (!ext[provider.toLowerCase()]) return null\n  const { loginProvider } = useIdentityContext()\n  const click = () => loginProvider(provider.toLowerCase() as \"github\" | \"gitlab\" | \"bitbucket\" | \"google\")\n  return (\n    <button onClick={click} className={`provider${provider} btn btnProvider`}>\n      Continue with {provider}\n    </button>\n  )\n}\n","import React from \"react\"\nimport { Login } from \"./components/login\"\nimport { Logout } from \"./components/logout\"\nimport { Signup } from \"./components/signup\"\nimport { useIdentityContext } from \"react-netlify-identity\"\nimport { Tabs, TabList, Tab, TabPanels, TabPanel } from \"@reach/tabs\"\n\nimport { Providers } from \"./components/providers\"\nfunction LoggedOutScreen() {\n  return (\n    <div>\n      <Tabs defaultIndex={0}>\n        <TabList className=\"header\">\n          <Tab className=\"btn btnHeader\">Login</Tab>\n          <Tab className=\"btn btnHeader\">Sign Up</Tab>\n        </TabList>\n\n        <TabPanels>\n          <TabPanel>\n            <Login />\n          </TabPanel>\n          <TabPanel>\n            <Signup />\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n      <Providers />\n    </div>\n  )\n}\n\nfunction LoggedInScreen() {\n  return <Logout />\n}\n\nfunction Gate({  }: { onCloseDialog: Function }) {\n  const identity = useIdentityContext()\n  const isLoggedIn = Boolean(identity && identity.user)\n  return isLoggedIn ? <LoggedInScreen /> : <LoggedOutScreen />\n}\n\nexport function Widget({ onCloseDialog }: { onCloseDialog: Function }) {\n  return <Gate onCloseDialog={onCloseDialog} />\n}\n","import React from \"react\"\n\nexport class ErrorBoundary extends React.Component<{}, { hasError: boolean }> {\n  constructor(props: {}) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError() {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true }\n  }\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went loading the widget.</h1>\n    }\n    return this.props.children\n  }\n}\n","import React from \"react\"\nimport {\n  Dialog\n  // DialogOverlay, DialogContent\n} from \"@reach/dialog\"\nimport VisuallyHidden from \"@reach/visually-hidden\"\n\nimport { Widget } from \"./app\"\n\nimport { ErrorBoundary } from \"./errorBoundary\"\n\nimport {\n  IdentityContextProvider as _IdentityContextProvider,\n  useIdentityContext as _useIdentityContext\n} from \"react-netlify-identity\"\nexport { User, Settings, ReactNetlifyIdentityAPI, useNetlifyIdentity } from \"react-netlify-identity\"\n\n/** URL of your Netlify Instance with Identity enabled e.g. https://netlify-gotrue-in-react.netlify.com */\n\ntype ModalProps = {\n  /** pass a boolean to be true or false */\n  showDialog: boolean\n  /** modal will call this function to set the state of showDialog to false */\n  onCloseDialog: () => void\n}\n\nexport const IdentityContextProvider = _IdentityContextProvider\nexport const useIdentityContext = _useIdentityContext\nexport function IdentityModal({ showDialog, onCloseDialog }: ModalProps) {\n  return (\n    <Dialog\n      isOpen={showDialog}\n      onDismiss={onCloseDialog}\n      style={{\n        border: \"solid 5px hsla(0, 0%, 0%, 0.5)\",\n        borderRadius: \"10px\",\n        position: \"relative\",\n        maxWidth: 400\n      }}\n    >\n      <button className=\"btn btnClose\" onClick={onCloseDialog}>\n        <VisuallyHidden>Close</VisuallyHidden>\n      </button>\n      <ErrorBoundary>\n        <React.Suspense fallback={<div>Loading...</div>}>\n          <Widget onCloseDialog={onCloseDialog} />\n        </React.Suspense>\n      </ErrorBoundary>\n    </Dialog>\n  )\n}\nexport default IdentityModal\n"],"names":["useLoading","isLoading","setState","React","useState","mount","useRef","useEffect","current","aPromise","finally","Login","loginUser","useIdentityContext","formRef","msg","setMsg","load","ref","className","onSubmit","e","preventDefault","target","email","value","password","then","user","console","log","catch","err","error","message","key","VisuallyHidden","type","name","placeholder","autoCapitalize","required","style","background","padding","Logout","identity","user_metadata","full_name","onClick","logoutUser","Signup","signupUser","username","data","signupSource","signup","id","Providers","settings","hasProviders","Object","entries","external","some","k","v","includes","isLocalhost","window","Boolean","location","hostname","match","ProviderButton","provider","ext","toLowerCase","loginProvider","LoggedOutScreen","Tabs","defaultIndex","TabList","Tab","TabPanels","TabPanel","LoggedInScreen","Gate","isLoggedIn","Widget","onCloseDialog","ErrorBoundary","Component","constructor","props","state","hasError","render","this","children","IdentityContextProvider","_IdentityContextProvider","_useIdentityContext","IdentityModal","showDialog","Dialog","isOpen","onDismiss","border","borderRadius","position","maxWidth","Suspense","fallback"],"mappings":"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"}